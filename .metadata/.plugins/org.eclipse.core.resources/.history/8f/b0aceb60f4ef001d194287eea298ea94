package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import dbutil.Util;
import vo.EquiVO;

public class EquipmentDAO {
	private Connection conn;
	private Statement st;
	private PreparedStatement pst; // ?지원
	private ResultSet rs;
	private int resultCount;

	//대여가능장비 전체조회
	public List<EquiVO> eqSelectAll() {
		String sql = """
					select *
					from equipments
				""";
		List<EquiVO> list = new ArrayList<>();
		conn = Util.getConnection();
		try {
			st = conn.createStatement();
			rs = st.executeQuery(sql);
			while(rs.next()) {
				EquiVO eq = makeEqui(rs);
				list.add(eq);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			Util.dbDisconnect(rs, st, conn);
		}
		return list;
	}
	
	//대여가능장비 전체조회
	public List<EquiVO> rentPossible() {
		String sql = """
					select EQUIPMENT_ID,
						   equipmentstype_TYPE_ID,
						   equipmentscompany_CO_ID,
						   MODEL,
						   SERIAL_NO,
						   PURCHASE_DATE,
						   PRICE
					from equipments mainEq 
					where mainEq.EQUIPMENT_ID not in (select eq.equipment_id 
														from equipments eq join rental r on(eq.equipment_id = r.equipments_equipment_id) 
														where r.status = '대여')
				""";
		List<EquiVO> list = new ArrayList<>();
		conn = Util.getConnection();
		try {
			st = conn.createStatement();
			rs = st.executeQuery(sql);
			System.out.println(rs+"////");
			while(rs.next()) {
				EquiVO eq = makeEqui(rs);
				list.add(eq);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			Util.dbDisconnect(rs, st, conn);
		}
		return list;
	}
	
	// 사용중인 장비 모두 조회
	public List<EquiVO> empUseEqAllSearch() {
		String sql = """
				select eq.* from rental r join employees emp on (r.employees_EMPLOYEE_ID = emp.EMPLOYEE_ID)
											join equipments eq on (r.equipments_EQUIPMENT_ID = eq.EQUIPMENT_ID)
							where r.STATUS = '대여' order by eq.EQUIPMENT_ID
				""";
		List<EquiVO> list = new ArrayList<>();
		conn = Util.getConnection();
		try {
			st = conn.createStatement();
			rs = st.executeQuery(sql);
			System.out.println(rs);
			while(rs.next()) {
				EquiVO eq = makeEqui(rs);
				list.add(eq);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			Util.dbDisconnect(rs, st, conn);
		}
		return list;
	}
	
	// 대여장비 유형별조회
	public List<EquiVO> eqTypeSearch(String typeName) {
		String sql = """
					select EQUIPMENT_ID,
						   equipmentstype_TYPE_ID,
						   equipmentscompany_CO_ID,
						   MODEL,
						   SERIAL_NO,
						   PURCHASE_DATE,
						   PRICE
					from equipments mainEq join equipmentstype eqT on (mainEq.equipmentstype_TYPE_ID = eqT.TYPE_ID)
					where mainEq.EQUIPMENT_ID not in (select eq.equipment_id 
														from equipments eq join rental r on(eq.equipment_id = r.equipments_equipment_id) 
														where r.status = '대여')
					and eqT.TYPE_NAME = ?
				""";
		List<EquiVO> list = new ArrayList<>();
		conn = Util.getConnection();
		try {
			pst = conn.prepareStatement(sql);
			pst.setString(1, typeName);
			rs = pst.executeQuery();
			while(rs.next()) {
				EquiVO emp = makeEqui(rs);
				list.add(emp);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			Util.dbDisconnect(rs, st, conn);
		}
		return list;
	}
	
	//모든 장비모델명 중복없이 가져오기
	public List<String> allModelList() {
		List<String> model = new ArrayList<>();
		String sql = """
				select distinct model from equipments
				""";
		conn = Util.getConnection();
		try {
			pst = conn.prepareStatement(sql);
			rs = pst.executeQuery();
			while(rs.next()) {
				model.add(rs.getString("MODEL"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			Util.dbDisconnect(null, pst, conn);
		}
		return model;
	}
	
	// 대여장비 모델별조회
	public List<EquiVO> rentModelSearch(String model) {
		String sql = """
					select EQUIPMENT_ID,
						   equipmentstype_TYPE_ID,
						   equipmentscompany_CO_ID,
						   MODEL,
						   SERIAL_NO,
						   PURCHASE_DATE,
						   PRICE
					from equipments mainEq 
					where mainEq.EQUIPMENT_ID not in (select eq.equipment_id from equipments eq join rental r on(eq.equipment_id = r.equipments_equipment_id) 
													  where r.status = '대여')
					and mainEq.MODEL like ?

				""";

		List<EquiVO> list = new ArrayList<>();
		conn = Util.getConnection();
		try {
			pst = conn.prepareStatement(sql);
			pst.setString(1, "%"+model+"%");
			rs = pst.executeQuery();
			while(rs.next()) {
				EquiVO eq = makeEqui(rs);
				list.add(eq);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			Util.dbDisconnect(rs, st, conn);
		}
		return list;
	}
	
	// 장비 필드 생성
	private EquiVO makeEqui(ResultSet rs) throws SQLException {
		EquiVO equi = new EquiVO();
		equi.setEquipment_id(rs.getInt("equipment_id"));
		equi.setEquipment_typeId(rs.getString("equipmentstype_TYPE_ID"));
		equi.setEquipment_coId(rs.getString("equipmentscompany_CO_ID"));
		equi.setModel(rs.getString("MODEL"));
		equi.setSerial_no(rs.getString("SERIAL_NO"));
		equi.setPurchase_date(rs.getDate("PURCHASE_DATE"));
		equi.setPrice(rs.getInt("PRICE"));
		return equi;
	}
		
	
}
